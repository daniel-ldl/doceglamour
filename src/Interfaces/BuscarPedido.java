/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Conexão.Conexao;
import Dados.Pedido;
import static Interfaces.Principal.jDesktopPane1;
import static Interfaces.Principal.tableModel;
import static Interfaces.Principal.usuario;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.TabelaPedidosTelaPrincipalModel;
import util.TeclasPermitidas;

/**
 *
 * @author joao
 */
public class BuscarPedido extends javax.swing.JInternalFrame {

    /**
     * Creates new form BuscarPedido
     */
    TabelaPedidosTelaPrincipalModel tableModel = new TabelaPedidosTelaPrincipalModel();
    TeclasPermitidas teclaspermitidas = new TeclasPermitidas();
    public static int codigoCliente;
    public int nivel;

    public BuscarPedido(int nivel) {
        initComponents();
        this.nivel = nivel;
        jTable1.setModel(tableModel);
        jtCodigoPedido.setDocument(teclaspermitidas);
        jtCodigoPedido.setEnabled(false);
        jtNomeCliente.setEnabled(false);
        jtNomeCrianca.setEnabled(false);
        jtTema.setEnabled(false);
        jDataAte.setEnabled(false);
        jDataDe.setEnabled(false);
        jrAberto.setEnabled(false);
        jrFechado.setEnabled(false);
        jrAmbos.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jrNomeCliente = new javax.swing.JRadioButton();
        jrCodigoPedido = new javax.swing.JRadioButton();
        jrNomeCrianca = new javax.swing.JRadioButton();
        jrTema = new javax.swing.JRadioButton();
        jrDataEntrega = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jtTema = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtNomeCliente = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtCodigoPedido = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtNomeCrianca = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jrAberto = new javax.swing.JRadioButton();
        jrFechado = new javax.swing.JRadioButton();
        jrAmbos = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();

        setClosable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Buscar Por:"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(jrNomeCliente);
        jrNomeCliente.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jrNomeCliente.setText("Nome Cliente");
        jrNomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrNomeClienteActionPerformed(evt);
            }
        });
        jPanel1.add(jrNomeCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 23, -1, -1));

        buttonGroup1.add(jrCodigoPedido);
        jrCodigoPedido.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jrCodigoPedido.setText("Codigo Pedido");
        jrCodigoPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrCodigoPedidoActionPerformed(evt);
            }
        });
        jPanel1.add(jrCodigoPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        buttonGroup1.add(jrNomeCrianca);
        jrNomeCrianca.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jrNomeCrianca.setText("Nome da Criança");
        jrNomeCrianca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrNomeCriancaActionPerformed(evt);
            }
        });
        jPanel1.add(jrNomeCrianca, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, -1, -1));

        buttonGroup1.add(jrTema);
        jrTema.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jrTema.setText("Tema");
        jrTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrTemaActionPerformed(evt);
            }
        });
        jPanel1.add(jrTema, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 20, -1, -1));

        buttonGroup1.add(jrDataEntrega);
        jrDataEntrega.setText("Data de Entrega");
        jrDataEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrDataEntregaActionPerformed(evt);
            }
        });
        jPanel1.add(jrDataEntrega, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 20, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dados"));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("Nome Cliente: ");

        jButton1.setBackground(new java.awt.Color(58, 65, 84));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setText("Codigo do Pedido:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("Nome da Criança:");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Tema:");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/lupa.jpg"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("De:");

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel6.setText("Até:");

        buttonGroup2.add(jrAberto);
        jrAberto.setText("Abertos");

        buttonGroup2.add(jrFechado);
        jrFechado.setText("Fechados");

        buttonGroup2.add(jrAmbos);
        jrAmbos.setText("Ambos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtTema, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtNomeCrianca, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtCodigoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(142, 142, 142)
                        .addComponent(jLabel6)
                        .addGap(144, 144, 144)
                        .addComponent(jrAberto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrFechado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jrAmbos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jtCodigoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtNomeCrianca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6)
                        .addComponent(jLabel3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrAberto)
                            .addComponent(jrFechado)
                            .addComponent(jrAmbos))))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pedidos"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(58, 65, 84));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Visualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jbAlterar.setBackground(new java.awt.Color(58, 65, 84));
        jbAlterar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbAlterar.setForeground(new java.awt.Color(255, 255, 255));
        jbAlterar.setText("Alterar");
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1012, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrNomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrNomeClienteActionPerformed
        jtCodigoPedido.setEnabled(false);
        jtNomeCrianca.setEnabled(false);
        jtTema.setEnabled(false);
        jDataAte.setEnabled(false);
        jDataDe.setEnabled(false);
        jrAberto.setEnabled(false);
        jrFechado.setEnabled(false);
        jrAmbos.setEnabled(false);
        jtNomeCliente.setEnabled(true);
    }//GEN-LAST:event_jrNomeClienteActionPerformed

    private void jrCodigoPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrCodigoPedidoActionPerformed

        jtNomeCliente.setEnabled(false);
        jtNomeCrianca.setEnabled(false);
        jtTema.setEnabled(false);
        jDataAte.setEnabled(false);
        jDataDe.setEnabled(false);
        jrAberto.setEnabled(false);
        jrFechado.setEnabled(false);
        jrAmbos.setEnabled(false);
        jtCodigoPedido.setEnabled(true);
    }//GEN-LAST:event_jrCodigoPedidoActionPerformed

    private void jrNomeCriancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrNomeCriancaActionPerformed
        jtCodigoPedido.setEnabled(false);
        jtNomeCliente.setEnabled(false);
        jtTema.setEnabled(false);
        jDataAte.setEnabled(false);
        jDataDe.setEnabled(false);
        jrAberto.setEnabled(false);
        jrFechado.setEnabled(false);
        jrAmbos.setEnabled(false);
        jtNomeCrianca.setEnabled(true);
    }//GEN-LAST:event_jrNomeCriancaActionPerformed

    private void jrTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrTemaActionPerformed
        jtCodigoPedido.setEnabled(false);
        jtNomeCliente.setEnabled(false);
        jtNomeCrianca.setEnabled(false);
        jDataAte.setEnabled(false);
        jDataDe.setEnabled(false);
        jrAberto.setEnabled(false);
        jrFechado.setEnabled(false);
        jrAmbos.setEnabled(false);
        jtTema.setEnabled(true);

    }//GEN-LAST:event_jrTemaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tableModel.removeAllRow();
        if (jrCodigoPedido.isSelected()) {
            if (jtCodigoPedido.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite o Codigo do Cliente", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            int Cod = Integer.parseInt(jtCodigoPedido.getText());
            String buscarPedido = "select * from dados.pedido where codigo_pedido = ?";
            String buscarCliente = "select nome from dados.cliente where codigo_cliente = ?";
            java.sql.Date dataSql = null;
            Date dataEntrega;
            Date dataSinal;
            Conexao minhaConexao = new Conexao();
            ResultSet rsPedido = null;
            ResultSet rsCliente = null;
            try {
                PreparedStatement stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedido);
                PreparedStatement stmBuscarCliente = minhaConexao.getConexao().prepareStatement(buscarCliente);

                stmBuscarPedido.setInt(1, Cod);
                rsPedido = stmBuscarPedido.executeQuery();

                if (rsPedido.next()) {

                    do {

                        Pedido novo = new Pedido();
                        Calendar convertido = Calendar.getInstance();
                        Calendar convertidoDataSinal = Calendar.getInstance();

                        if (rsPedido.getDate("data_sinal") == null) {

                        } else {
                            dataSinal = rsPedido.getDate("data_sinal");
                            convertidoDataSinal.setTimeInMillis(dataSinal.getTime());
                            novo.setData_sinal(convertidoDataSinal);

                        }
                        dataEntrega = rsPedido.getDate("data_entrega");
                        convertido.setTimeInMillis(dataEntrega.getTime());
                        novo.setData_entrega(convertido);
                        novo.setCodigo_pedido(rsPedido.getInt("codigo_pedido"));
                        novo.setCodigo_cliente(rsPedido.getInt("codigo_cliente"));
                        novo.setDesconto(rsPedido.getFloat("desconto"));
                        novo.setIdade_crianca(rsPedido.getInt("idadecrianca"));
                        novo.setNome_crianca(rsPedido.getString("nome_crianca"));
                        novo.setObs(rsPedido.getString("obs"));
                        novo.setTaxa_entrega(rsPedido.getFloat("taxa_entrega"));
                        novo.setTema(rsPedido.getString("tema"));
                        novo.setValor_sinal(rsPedido.getFloat("valor_sinal"));
                        novo.setValor_total(rsPedido.getFloat("valor_total"));
                        novo.setStatus(rsPedido.getString("status"));
                        novo.setCodigo_usuario(rsPedido.getInt("codigo_usuario"));
                        stmBuscarCliente.setInt(1, novo.getCodigo_cliente());
                        rsCliente = stmBuscarCliente.executeQuery();
                        rsCliente.next();
                        tableModel.addCliente(rsCliente.getString("nome"));
                        tableModel.addRow(novo);

                    } while (rsPedido.next());
                } else {
                    JOptionPane.showMessageDialog(null, "Nenhum Pedido Encontrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPedido.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                minhaConexao.fecharConexao();
            }

        } else if (jrNomeCliente.isSelected()) {
            if (jtNomeCliente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Selecione um Cliente", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;

            }

            String buscarPedido = "select * from dados.pedido where codigo_cliente = ?";
            String buscarCliente = "select nome from dados.cliente where codigo_cliente = ?";
            Date dataEntrega;
            Date dataSinal;
            Conexao minhaConexao = new Conexao();
            ResultSet rsPedido = null;
            ResultSet rsCliente = null;
            try {
                PreparedStatement stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedido);
                PreparedStatement stmBuscarCliente = minhaConexao.getConexao().prepareStatement(buscarCliente);

                stmBuscarPedido.setInt(1, codigoCliente);
                rsPedido = stmBuscarPedido.executeQuery();

                if (rsPedido.next()) {

                    do {

                        Pedido novo = new Pedido();
                        Calendar convertido = Calendar.getInstance();
                        Calendar convertidoDataSinal = Calendar.getInstance();

                        if (rsPedido.getDate("data_sinal") == null) {

                        } else {
                            dataSinal = rsPedido.getDate("data_sinal");
                            convertidoDataSinal.setTimeInMillis(dataSinal.getTime());
                            novo.setData_sinal(convertidoDataSinal);

                        }
                        dataEntrega = rsPedido.getDate("data_entrega");
                        convertido.setTimeInMillis(dataEntrega.getTime());
                        novo.setData_entrega(convertido);
                        novo.setCodigo_pedido(rsPedido.getInt("codigo_pedido"));
                        novo.setCodigo_cliente(rsPedido.getInt("codigo_cliente"));
                        novo.setDesconto(rsPedido.getFloat("desconto"));
                        novo.setIdade_crianca(rsPedido.getInt("idadecrianca"));
                        novo.setNome_crianca(rsPedido.getString("nome_crianca"));
                        novo.setObs(rsPedido.getString("obs"));
                        novo.setTaxa_entrega(rsPedido.getFloat("taxa_entrega"));
                        novo.setTema(rsPedido.getString("tema"));
                        novo.setValor_sinal(rsPedido.getFloat("valor_sinal"));
                        novo.setValor_total(rsPedido.getFloat("valor_total"));
                        novo.setStatus(rsPedido.getString("status"));
                        novo.setCodigo_usuario(rsPedido.getInt("codigo_usuario"));
                        stmBuscarCliente.setInt(1, novo.getCodigo_cliente());
                        rsCliente = stmBuscarCliente.executeQuery();
                        rsCliente.next();
                        tableModel.addCliente(rsCliente.getString("nome"));
                        tableModel.addRow(novo);

                    } while (rsPedido.next());
                } else {
                    JOptionPane.showMessageDialog(null, "Nenhum Pedido Encontrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPedido.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                minhaConexao.fecharConexao();
            }

        } else if (jrNomeCrianca.isSelected()) {

            if (jtNomeCrianca.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Selecione uma Criança", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            String buscarPedido = "select * from dados.pedido where nome_crianca ~* ?";
            String buscarCliente = "select nome from dados.cliente where codigo_cliente = ?";
            java.sql.Date dataSql = null;
            Date dataEntrega;
            Date dataSinal;
            Conexao minhaConexao = new Conexao();
            ResultSet rsPedido = null;
            ResultSet rsCliente = null;
            try {
                PreparedStatement stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedido);
                PreparedStatement stmBuscarCliente = minhaConexao.getConexao().prepareStatement(buscarCliente);

                stmBuscarPedido.setString(1, jtNomeCrianca.getText());
                rsPedido = stmBuscarPedido.executeQuery();

                if (rsPedido.next()) {

                    do {

                        Pedido novo = new Pedido();
                        Calendar convertido = Calendar.getInstance();
                        Calendar convertidoDataSinal = Calendar.getInstance();

                        if (rsPedido.getDate("data_sinal") == null) {

                        } else {
                            dataSinal = rsPedido.getDate("data_sinal");
                            convertidoDataSinal.setTimeInMillis(dataSinal.getTime());
                            novo.setData_sinal(convertidoDataSinal);

                        }
                        dataEntrega = rsPedido.getDate("data_entrega");
                        convertido.setTimeInMillis(dataEntrega.getTime());
                        novo.setData_entrega(convertido);
                        novo.setCodigo_pedido(rsPedido.getInt("codigo_pedido"));
                        novo.setCodigo_cliente(rsPedido.getInt("codigo_cliente"));
                        novo.setDesconto(rsPedido.getFloat("desconto"));
                        novo.setIdade_crianca(rsPedido.getInt("idadecrianca"));
                        novo.setNome_crianca(rsPedido.getString("nome_crianca"));
                        novo.setObs(rsPedido.getString("obs"));
                        novo.setTaxa_entrega(rsPedido.getFloat("taxa_entrega"));
                        novo.setTema(rsPedido.getString("tema"));
                        novo.setValor_sinal(rsPedido.getFloat("valor_sinal"));
                        novo.setValor_total(rsPedido.getFloat("valor_total"));
                        novo.setStatus(rsPedido.getString("status"));
                        novo.setCodigo_usuario(rsPedido.getInt("codigo_usuario"));
                        stmBuscarCliente.setInt(1, novo.getCodigo_cliente());
                        rsCliente = stmBuscarCliente.executeQuery();
                        rsCliente.next();
                        tableModel.addCliente(rsCliente.getString("nome"));
                        tableModel.addRow(novo);

                    } while (rsPedido.next());
                } else {
                    JOptionPane.showMessageDialog(null, "Nenhum Pedido Encontrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPedido.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                minhaConexao.fecharConexao();
            }

        } else if (jrTema.isSelected()) {
            if (jtTema.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite um Tema", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            String buscarPedido = "select * from dados.pedido where tema ~* ?";
            String buscarCliente = "select nome from dados.cliente where codigo_cliente = ?";
            java.sql.Date dataSql = null;
            Date dataEntrega;
            Date dataSinal;
            Conexao minhaConexao = new Conexao();
            ResultSet rsPedido = null;
            ResultSet rsCliente = null;
            try {
                PreparedStatement stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedido);
                PreparedStatement stmBuscarCliente = minhaConexao.getConexao().prepareStatement(buscarCliente);

                stmBuscarPedido.setString(1, jtTema.getText());
                rsPedido = stmBuscarPedido.executeQuery();

                if (rsPedido.next()) {

                    do {

                        Pedido novo = new Pedido();
                        Calendar convertido = Calendar.getInstance();
                        Calendar convertidoDataSinal = Calendar.getInstance();

                        if (rsPedido.getDate("data_sinal") == null) {

                        } else {
                            dataSinal = rsPedido.getDate("data_sinal");
                            convertidoDataSinal.setTimeInMillis(dataSinal.getTime());
                            novo.setData_sinal(convertidoDataSinal);

                        }
                        dataEntrega = rsPedido.getDate("data_entrega");
                        convertido.setTimeInMillis(dataEntrega.getTime());
                        novo.setData_entrega(convertido);
                        novo.setCodigo_pedido(rsPedido.getInt("codigo_pedido"));
                        novo.setCodigo_cliente(rsPedido.getInt("codigo_cliente"));
                        novo.setDesconto(rsPedido.getFloat("desconto"));
                        novo.setIdade_crianca(rsPedido.getInt("idadecrianca"));
                        novo.setNome_crianca(rsPedido.getString("nome_crianca"));
                        novo.setObs(rsPedido.getString("obs"));
                        novo.setTaxa_entrega(rsPedido.getFloat("taxa_entrega"));
                        novo.setTema(rsPedido.getString("tema"));
                        novo.setValor_sinal(rsPedido.getFloat("valor_sinal"));
                        novo.setValor_total(rsPedido.getFloat("valor_total"));
                        novo.setStatus(rsPedido.getString("status"));
                        novo.setCodigo_usuario(rsPedido.getInt("codigo_usuario"));
                        stmBuscarCliente.setInt(1, novo.getCodigo_cliente());
                        rsCliente = stmBuscarCliente.executeQuery();
                        rsCliente.next();
                        tableModel.addCliente(rsCliente.getString("nome"));
                        tableModel.addRow(novo);

                    } while (rsPedido.next());
                } else {
                    JOptionPane.showMessageDialog(null, "Nenhum Pedido Encontrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPedido.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                minhaConexao.fecharConexao();
            }

        } else if (jrDataEntrega.isSelected()) {
            if (jDataDe.getDateFormatString().equals("")) {
                JOptionPane.showMessageDialog(null, "Selecione uma Data De: ", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            if (jDataAte.getDateFormatString().equals("")) {
                JOptionPane.showMessageDialog(null, "Selecione uma Data Até: ", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            if (jrAberto.isSelected() || jrAmbos.isSelected() || jrFechado.isSelected()) {

            } else {
                JOptionPane.showMessageDialog(null, "Selecione um Status do Pedido", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            String buscarPedido = "select * from dados.pedido where pedido.data_pedido between ? and ? and pedido.status = ?";
            String buscarCliente = "select nome from dados.cliente where codigo_cliente = ?";
            Date dataEntrega;
            Date dataSinal;
            Conexao minhaConexao = new Conexao();
            ResultSet rsPedido = null;
            ResultSet rsCliente = null;
            try {
                PreparedStatement stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedido);
                PreparedStatement stmBuscarCliente = minhaConexao.getConexao().prepareStatement(buscarCliente);

                stmBuscarPedido.setDate(1, new java.sql.Date(jDataDe.getDate().getTime()));
                stmBuscarPedido.setDate(2, new java.sql.Date(jDataAte.getDate().getTime()));
                if (jrAberto.isSelected()) {
                    stmBuscarPedido.setString(3, "Aberto");

                }
                if (jrFechado.isSelected()) {
                    stmBuscarPedido.setString(3, "Fechado");
                }
                if (jrAmbos.isSelected()) {
                    String buscarPedidoAmbos = "select * from dados.pedido where pedido.data_entrega between ? and ? ";
                    stmBuscarPedido = minhaConexao.getConexao().prepareStatement(buscarPedidoAmbos);
                    stmBuscarPedido.setDate(1, new java.sql.Date(jDataDe.getDate().getTime()));
                    stmBuscarPedido.setDate(2, new java.sql.Date(jDataAte.getDate().getTime()));
                }
                rsPedido = stmBuscarPedido.executeQuery();

                if (rsPedido.next()) {

                    do {

                        Pedido novo = new Pedido();
                        Calendar convertido = Calendar.getInstance();
                        Calendar convertidoDataSinal = Calendar.getInstance();

                        if (rsPedido.getDate("data_sinal") == null) {

                        } else {
                            dataSinal = rsPedido.getDate("data_sinal");
                            convertidoDataSinal.setTimeInMillis(dataSinal.getTime());
                            novo.setData_sinal(convertidoDataSinal);

                        }
                        dataEntrega = rsPedido.getDate("data_entrega");
                        convertido.setTimeInMillis(dataEntrega.getTime());
                        novo.setData_entrega(convertido);
                        novo.setCodigo_pedido(rsPedido.getInt("codigo_pedido"));
                        novo.setCodigo_cliente(rsPedido.getInt("codigo_cliente"));
                        novo.setDesconto(rsPedido.getFloat("desconto"));
                        novo.setIdade_crianca(rsPedido.getInt("idadecrianca"));
                        novo.setNome_crianca(rsPedido.getString("nome_crianca"));
                        novo.setObs(rsPedido.getString("obs"));
                        novo.setTaxa_entrega(rsPedido.getFloat("taxa_entrega"));
                        novo.setTema(rsPedido.getString("tema"));
                        novo.setValor_sinal(rsPedido.getFloat("valor_sinal"));
                        novo.setValor_total(rsPedido.getFloat("valor_total"));
                        novo.setStatus(rsPedido.getString("status"));
                        novo.setCodigo_usuario(rsPedido.getInt("codigo_usuario"));
                        stmBuscarCliente.setInt(1, novo.getCodigo_cliente());
                        rsCliente = stmBuscarCliente.executeQuery();
                        rsCliente.next();
                        tableModel.addCliente(rsCliente.getString("nome"));
                        tableModel.addRow(novo);

                    } while (rsPedido.next());
                } else {
                    JOptionPane.showMessageDialog(null, "Nenhum Pedido Encontrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPedido.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                minhaConexao.fecharConexao();
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        BuscarCliente novoBuscarCliente = new BuscarCliente("BuscarPedido");
        jDesktopPane1.add(novoBuscarCliente);
        novoBuscarCliente.setLocation(jDesktopPane1.getWidth() / 2 - novoBuscarCliente.getWidth() / 2, jDesktopPane1.getHeight() / 2 - novoBuscarCliente.getHeight() / 2);
        novoBuscarCliente.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha >= 0) {
            Pedido selecionado = new Pedido();
            selecionado = tableModel.getPedidoCompleto(linha);
            VisualizarPedido alterarPedido = new VisualizarPedido(selecionado);
            alterarPedido.setLocation(jDesktopPane1.getWidth() / 2 - alterarPedido.getWidth() / 2, jDesktopPane1.getHeight() / 2 - alterarPedido.getHeight() / 2);
            jDesktopPane1.add(alterarPedido);
            alterarPedido.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Pedido", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        if (usuario.getNivel() == 2) {
            JOptionPane.showMessageDialog(null, "Operação valida somente para Administradores", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int linha = jTable1.getSelectedRow();
        if (linha >= 0) {

            Pedido selecionado = new Pedido();
            selecionado = tableModel.getPedidoCompleto(linha);
            AlterarPedido alterarPedido = new AlterarPedido(selecionado);
            alterarPedido.setLocation(jDesktopPane1.getWidth() / 2 - alterarPedido.getWidth() / 2, jDesktopPane1.getHeight() / 2 - alterarPedido.getHeight() / 2);
            jDesktopPane1.add(alterarPedido);
            alterarPedido.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Pedido", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jrDataEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrDataEntregaActionPerformed
        jtCodigoPedido.setEnabled(false);
        jtNomeCliente.setEnabled(false);
        jtNomeCrianca.setEnabled(false);
        jtTema.setEnabled(false);
        jDataAte.setEnabled(true);
        jDataDe.setEnabled(true);
        jrAberto.setEnabled(true);
        jrFechado.setEnabled(true);
        jrAmbos.setEnabled(true);

    }//GEN-LAST:event_jrDataEntregaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JRadioButton jrAberto;
    private javax.swing.JRadioButton jrAmbos;
    private javax.swing.JRadioButton jrCodigoPedido;
    private javax.swing.JRadioButton jrDataEntrega;
    private javax.swing.JRadioButton jrFechado;
    private javax.swing.JRadioButton jrNomeCliente;
    private javax.swing.JRadioButton jrNomeCrianca;
    private javax.swing.JRadioButton jrTema;
    private javax.swing.JTextField jtCodigoPedido;
    public static javax.swing.JTextField jtNomeCliente;
    private javax.swing.JTextField jtNomeCrianca;
    private javax.swing.JTextField jtTema;
    // End of variables declaration//GEN-END:variables
}
